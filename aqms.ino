/* === GarudAQMS v1.0 by Belen Septian & Ali Zainal Abidin === */
/* ESP32 Core Libraries */
#include <WiFi.h>
#include <Wire.h>
#include "SPIFFS.h"
#include <DNSServer.h>
extern "C" {
  #include "freertos/FreeRTOS.h"
  #include "freertos/timers.h"
}

/* External Libraries */
#include <ESPAsyncWebServer.h> //credit goes to me-no-dev
#include <AsyncTCP.h> //credit goes to me-no-dev
#include <Adafruit_GFX.h> //credit goes to adafruit
#include <Adafruit_SSD1306.h> //credit goes to adafruit
#include <M702.h> //by Belen Septian
#include <ArduinoJson.h> //credit goes to bblanchon
#include <AsyncMqttClient.h> //credit goes to marvinroger

/* Constants */
//OLED
#define SCREEN_WIDTH 128 //OLED display width, in pixels
#define SCREEN_HEIGHT 64 //OLED display height, in pixels
//MQTT Host
#define MQTT_HOST IPAddress(116, 90, 208, 81)
#define MQTT_PORT 30412
//POST variable
const char* PARAM_INPUT_1 = "ssid";
const char* PARAM_INPUT_2 = "pass";
const char* PARAM_INPUT_3 = "lat";
const char* PARAM_INPUT_4 = "lng";
//Path
const char* ssidPath = "/ssid.txt";
const char* passPath = "/pass.txt";
const char* latPath = "/lat.txt";
const char* lngPath = "/lng.txt";
//Timer
const long interval = 60000;  //interval to wait for Wi-Fi connection (milliseconds)
const long interval_task1 = 10000;
//MQTT Topic
const char* topic = "MDP/IOT/";
const char* id_ = "4C67C8E342A8";
//Soft AP
const char* ssid_ap = "AQMS.AP";
//Emoji
const unsigned char smileEmoji [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x03, 0xff, 0xe0, 0x00, 
  0x07, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xfe, 0x00, 
  0x3f, 0x7f, 0x7e, 0x00, 0x3f, 0x3e, 0x3e, 0x00, 0x7f, 0x7f, 0x7f, 0x00, 0x7f, 0xff, 0xff, 0x00, 
  0x7b, 0xff, 0xef, 0x00, 0x79, 0xff, 0xef, 0x00, 0x79, 0xff, 0xcf, 0x00, 0x39, 0xff, 0xce, 0x00, 
  0x3c, 0xff, 0x9e, 0x00, 0x1c, 0x7f, 0x1e, 0x00, 0x1e, 0x1c, 0x3c, 0x00, 0x0f, 0x80, 0xf8, 0x00, 
  0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x3e, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00
};
const unsigned char sadEmoji [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 
  0x07, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x1e, 0x3e, 0x3c, 0x00, 
  0x3c, 0x3e, 0x3e, 0x00, 0x3e, 0x3e, 0x3e, 0x00, 0x3f, 0x7f, 0x7e, 0x00, 0x3f, 0xff, 0xfe, 0x00, 
  0x3f, 0xc0, 0xfe, 0x00, 0x3f, 0x00, 0x7e, 0x00, 0x3e, 0x7f, 0x3e, 0x00, 0x3c, 0xff, 0x9e, 0x00, 
  0x3d, 0xff, 0xde, 0x00, 0x19, 0xff, 0xcc, 0x00, 0x1b, 0xff, 0xec, 0x00, 0x0f, 0xff, 0xf8, 0x00, 
  0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00
};
const unsigned char umdp [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xbf, 0x04, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x38, 0x02, 
  0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x38, 0x01, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x18, 0x70, 0x01, 0x80, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x70, 0x00, 0x80, 0x06, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70, 0x00, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 
  0x70, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x70, 0x00, 0x00, 0x00, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x8e, 0x60, 0x09, 0xa6, 0xe3, 0xef, 0x3b, 0xf3, 0x1c, 0x00, 0x8c, 0x60, 0x0d, 
  0xb6, 0xe7, 0xef, 0xfb, 0x73, 0x3c, 0x01, 0x18, 0x60, 0x0d, 0xbe, 0xb5, 0xed, 0xf3, 0x27, 0xb8, 
  0x01, 0x10, 0x60, 0x0d, 0xbe, 0x9d, 0xef, 0x9a, 0x27, 0x9c, 0x03, 0x30, 0x60, 0x0f, 0xae, 0x99, 
  0xef, 0x3a, 0x27, 0xfc, 0x02, 0x20, 0x77, 0x07, 0x26, 0x89, 0xed, 0xba, 0x2c, 0xfc, 0x02, 0x20, 
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x60, 0xfc, 0x0e, 0x00, 0x38, 0x7f, 0xc0, 
  0x3f, 0xe0, 0x74, 0x43, 0xf0, 0x0f, 0x00, 0x78, 0xff, 0xf0, 0x3f, 0xf8, 0x64, 0x47, 0xf0, 0x0f, 
  0x80, 0x78, 0xff, 0xf8, 0x3f, 0xfc, 0x64, 0x4f, 0xf0, 0x0f, 0x80, 0xf8, 0xff, 0xfc, 0x3f, 0xfe, 
  0x44, 0xde, 0x30, 0x0f, 0xc0, 0xf8, 0xf0, 0x3e, 0x3c, 0x1e, 0x4c, 0xdc, 0x30, 0x0f, 0xc1, 0xf8, 
  0xf0, 0x1e, 0x3c, 0x1e, 0x4c, 0xd8, 0x38, 0x0f, 0xe3, 0xf8, 0xf0, 0x1f, 0x3c, 0x1e, 0x4c, 0xc0, 
  0x38, 0x0f, 0xe3, 0xf8, 0xf0, 0x0f, 0x3c, 0x1e, 0x4c, 0xc0, 0x38, 0x0f, 0xf7, 0xf8, 0xf0, 0x0f, 
  0x3c, 0x3e, 0x6c, 0xc0, 0x18, 0x0f, 0x7f, 0xf8, 0xf0, 0x0f, 0x3f, 0xfc, 0x6c, 0xc0, 0x1c, 0x0f, 
  0x7f, 0x78, 0xf0, 0x1e, 0x3f, 0xfc, 0x64, 0x40, 0x1c, 0x0f, 0x3e, 0x78, 0xf0, 0x1e, 0x3f, 0xf0, 
  0x64, 0x40, 0x0c, 0x0f, 0x3e, 0x38, 0xf0, 0x7e, 0x3c, 0x00, 0x64, 0x40, 0x0c, 0x0f, 0x1c, 0x38, 
  0xff, 0xfc, 0x3c, 0x00, 0x26, 0x60, 0x0e, 0x0f, 0x08, 0x38, 0xff, 0xf8, 0x3c, 0x00, 0x26, 0x60, 
  0x0e, 0x0f, 0x00, 0x38, 0xff, 0xf0, 0x3c, 0x00, 0x32, 0x20, 0x07, 0x0e, 0x00, 0x38, 0x7f, 0x80, 
  0x38, 0x00, 0x32, 0x30, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x10, 0x07, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x98, 0x03, 0x80, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x19, 0xc8, 0x01, 0xff, 0xe0, 0x20, 0x30, 0x00, 0x00, 0x00, 0x09, 0xcd, 0xff, 0xff, 0x00, 0x20, 
  0x30, 0x00, 0x00, 0x00, 0x0d, 0x86, 0xff, 0xf0, 0x00, 0x20, 0x60, 0x00, 0x00, 0x00, 0x04, 0x02, 
  0x7f, 0xe0, 0x00, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0xe0, 0x00, 0x21, 0xc0, 0x00, 
  0x00, 0x00, 0x03, 0x01, 0x80, 0x70, 0x00, 0x21, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc0, 0x78, 
  0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x38, 0x38, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xc0, 0x1c, 0x1c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1c, 0x1e, 0x00, 0x7c, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x0f, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
  0x00, 0x07, 0x8f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3c, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char nowifi [] PROGMEM = {
  0x00, 0x00, 0x18, 0x00, 0x0d, 0x80, 0x0d, 0xf0, 0x36, 0xfc, 0x77, 0x0e, 0x63, 0x66, 0x1d, 0xb8, 
  0x1d, 0xf8, 0x12, 0xc8, 0x06, 0xe0, 0x06, 0x60, 0x00, 0x30, 0x01, 0xb0, 0x01, 0x80, 0x00, 0x00
};
const unsigned char wifisymb [] PROGMEM = {
  0x07, 0xe0, 0x1f, 0xf8, 0x38, 0x1c, 0x60, 0x06, 0xc3, 0xc3, 0x0f, 0xf0, 0x1c, 0x38, 0x10, 0x08, 
  0x03, 0xc0, 0x07, 0xe0, 0x06, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80
};
const unsigned char onlinesymb [] PROGMEM = {
  0x07, 0xe0, 0x1f, 0xf8, 0x34, 0x2c, 0x6d, 0xb6, 0x7f, 0xfe, 0x88, 0x11, 0x88, 0x11, 0x99, 0x99, 
  0x99, 0x99, 0x88, 0x11, 0x88, 0x11, 0x7f, 0xfe, 0x6d, 0xb6, 0x34, 0x2c, 0x1f, 0xf8, 0x07, 0xe0
};
const unsigned char offlinesymb [] PROGMEM = {
  0x01, 0x80, 0x0f, 0xf2, 0x1e, 0x74, 0x24, 0x2c, 0x64, 0x16, 0x7f, 0x3e, 0x48, 0x52, 0xc8, 0x93, 
  0xc9, 0x13, 0x4a, 0x12, 0x77, 0xfe, 0x6c, 0x26, 0x14, 0x24, 0x3e, 0x78, 0x4f, 0xf0, 0x01, 0x80
};

/* String */
//POST variable
String ssid, pass, lat, lng;

/* Long */
//Timer
unsigned long previousMillis = 0;
//Millis
long now_task1 = millis(), lastMeasure_task1 = 0;

/* boolean */
//WiFi
bool is_connected = false;

/* char */
//JSON
char JSONrootmessageBuffer[300];
//MQTT
char topic_[50];

 /* int */
//Connection Status
int conn_status = 0;

/* Classes */
//OLED
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
//AsyncWebServer
AsyncWebServer server(80);
//IP_AP
IPAddress local_IP(192,168,4,22);
IPAddress gateway_IP(192,168,4,9);
IPAddress subnet_IP(255,255,255,0);
//WiFiClient
WiFiClient espClient;
//JSON
StaticJsonBuffer<300> jsonrootBuffer;
StaticJsonBuffer<300> jsonstationBuffer;
StaticJsonBuffer<300> jsonpayloadBuffer;
JsonObject &root = jsonrootBuffer.createObject();
JsonObject &station = jsonstationBuffer.createObject();
JsonObject &payload = jsonpayloadBuffer.createObject();
//M702 air quality sensor
M702 M702(16,17);
//DNS Server
DNSServer dnsServer;
//AsyncMQTT
AsyncMqttClient mqttClient;
//Timer Handler
TimerHandle_t mqttReconnectTimer;
TimerHandle_t wifiReconnectTimer;

void setup() 
{
  initAll();
}

void loop() 
{
  if(is_connected == true)
  {
    task1(); 
  }
}
